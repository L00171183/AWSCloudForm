# Outputs:
#   StackSSHSecurityGroup:
#     Description: The SSH Security Group for our Company
#     Value: !Ref MyCompanyWideSSHSecurityGroup
#     Export:
#       Name: SSHSecurityGroup

Parameters:
  AvailabilityZone1: 
    Default: us-east-1a
    Description: "Avaibalbility Zone"
    Type: String
  
  AvailabilityZone2: 
    Default: us-east-1b
    Description: "Second Availability Zone"
    Type: String
    
  PublicSubnetCIDR: 
    Default: 10.0.1.0/24
    Description: "Public Subnet CIDR"
    Type: String
  
  PrivateSubnetCIDR1: 
    Default: 10.0.2.0/24
    Description: "Private Subnet CIDR"
    Type: String
  
  PrivateSubnetCIDR2: 
    Default: 10.0.3.0/24
    Description: "Private Subnet CIDR"
    Type: String

  VPCCIDR: 
    Default: 10.0.0.0/16
    Description: "VPC CIDR"
    Type: String
  
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    ConstraintDescription: must be a valid EC2 instance type

  # ImageId1:
  #   Type: String
  #   Default: ami-09d3b3274b6c5d4aa

  # ImageId2:
  #   Type: String
  #   Default: ami-089a545a9ed9893b6

  EnvironmentName:
    Description: Environment Name
    Type: String
    AllowedValues: [development, production]
    ConstraintDescription: must be development or production

Mappings:
  
  EnvironmentToInstanceType:
    development:
      instanceType: t2.micro
    production:
      instanceType: t2.small

  AWSRegionArch2AMI:
    us-east-1:
      HVM64: "ami-09d3b3274b6c5d4aa"



Resources:
# VPC 
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties: 
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'

  InternetGateway:
     Type: AWS::EC2::InternetGateway
  
  InternetAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

#route table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      
 #PrivateRouteTable:
  # Type: AWS::EC2::RouteTable
   #Properties:
    # VpcId: !Ref VPC
  
  PublicRoute: 
    Type: "AWS::EC2::Route"
    DependsOn: InternetAttachGateway
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

#public subnetwork for jumpbox
  JumpBoxPublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties: 
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCIDR
      AvailabilityZone: !Ref AvailabilityZone1
  JumpBoxPublicSubnetRouteTableAssociation: 
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref JumpBoxPublicSubnet

# subnetwork for front end app instance
  FrontEndAppSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties: 
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCIDR2
      AvailabilityZone: !Ref AvailabilityZone2

#private subnetwork for app server instance
  AppServerPrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties: 
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCIDR1
      AvailabilityZone: !Ref AvailabilityZone1
  # AppServerPrivateSubnetRouteTableAssociation: 
  #   Type: "AWS::EC2::SubnetRouteTableAssociation"
  #   Properties: 
  #    # RouteTableId: !Ref PrivateRouteTable
  #     SubnetId: !Ref AppServerPrivateSubnet


#JumpBox Instance
  JumpBoxEC2:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !FindInMap [EnvironmentToInstanceType, !Ref 'EnvironmentName', instanceType]
      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', HVM64]
      AvailabilityZone: !Ref AvailabilityZone1
      NetworkInterfaces:
        - SubnetId: !Ref JumpBoxPublicSubnet
          DeviceIndex: 0
#JumpBox security group
  JumpBoxSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties: 
      GroupDescription: Allow http to client host
      VpcId: !Ref VPC
  JumpBoxSecurityGroupInbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref JumpBoxSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0
  JumpBoxSecurityGroupOutbound1:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref JumpBoxSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      DestinationSecurityGroupId: !Ref PPrivateSecurityGroup
  
  JumpBoxSecurityGroupOutbound2:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref JumpBoxSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      DestinationSecurityGroupId: !Ref FrontEndAppSecurityGroup

#App server instance
  PPrivateEC2:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', HVM64]
      AvailabilityZone: !Ref AvailabilityZone1
      NetworkInterfaces:
        - SubnetId: !Ref AppServerPrivateSubnet
          DeviceIndex: 0
#app server security group
  PPrivateSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties: 
      GroupDescription: Allow http to client host
      VpcId: !Ref VPC
  PPrivateSecurityGroupInbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref PPrivateSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !Ref JumpBoxSecurityGroup

  PPrivateSecurityGroupInbound2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref PPrivateSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !Ref FrontEndAppSecurityGroup

#Front end App instance
  FrontEndAppEC2:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', HVM64]
      AvailabilityZone: !Ref AvailabilityZone2
      NetworkInterfaces:
        - SubnetId: !Ref FrontEndAppSubnet
          DeviceIndex: 0

#front end app security group
  FrontEndAppSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties: 
      GroupDescription: Allow http to client host
      VpcId: !Ref VPC
  FrontEndAppSecurityGroupInbound1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref FrontEndAppSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !Ref JumpBoxSecurityGroup

  FrontEndAppSecurityGroupOutbound1:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref FrontEndAppSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      DestinationSecurityGroupId: !Ref PPrivateSecurityGroup

  FrontEndAppSecurityGroupOutbound2:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref FrontEndAppSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      DestinationSecurityGroupId: !Ref FrontEndAppSecurityGroup

#DB Instance
  
